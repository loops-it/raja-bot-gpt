<!DOCTYPE html>
<html lang="en">

<head>
  <title>Raja Jewellers Chat Bot</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
    rel="stylesheet">

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
    integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
    integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
    crossorigin="anonymous"></script>
  <style>
    .container {
      width: 360px;
      position: absolute;
      bottom: 10px;
      right: 10px;
      border: solid 1px #333;
      border-radius: 30px;
    }

    .bot-message {
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 10px;
      color: #000;
      display: flex;
      align-items: end;
      font-family: "Poppins", sans-serif;
      display: flex;
      flex-direction: column-reverse;
      justify-content: start;
      align-items: start;
    }

    .bot-message div {
      border: solid 1px #3d3d3d;
      border-radius: 30px;
      max-width: 100%;
      width: max-content;
      padding: 8px;
      border-bottom-left-radius: 0px;
      font-size: 12px;
    }

    .user-message {
      padding: 10px;
      border-radius: 5px;
      white-space: pre-line;
      margin-bottom: 10px;
      color: #000;
      display: flex;
      flex-direction: row-reverse;
      align-items: end;
      font-family: "Poppins", sans-serif;
      display: flex;
      flex-direction: column-reverse;
      justify-content: end;
      align-items: end;
    }

    .user-message div {
      border: solid 1px #3d3d3d;
      border-radius: 30px;
      max-width: 90%;
      width: max-content;
      padding: 10px 20px;
      border-bottom-right-radius: 0px;
      margin-right: 10px;
      font-size: 12px;
    }

    .background {
      background: transparent;
    }

    #response {
      width: 100%;
      padding: 0px;
      background-color: #fff;
      border-radius: 25px;
      height: 450px;
      overflow: auto;
      position: relative;
      font-family: "Poppins", sans-serif;
      font-size: 12px;
    }

    .message-image {
      width: 40px;
      height: 40px;
      margin-right: 10px;
      margin-top: 10px;
      border-radius: 50%;
    }

    .chat-submit-button {
      position: absolute;
      right: 10px;
      bottom: 10px;
      background-color: #000;
      border-radius: 100%;
      color: #fff;
      padding: 10px;
      font-size: 20px;
      line-height: 20px;
      font-family: "Poppins", sans-serif;
    }

    #questionForm {
      position: relative;
      padding: 10px;
      padding-top: 0px;
    }

    .chat-header {
      background-color: #561f7a;
      border-top-left-radius: 30px;
      border-top-right-radius: 30px;
    }

    .chat-header img {
      height: 50px;
      width: 50px;
    }

    .chat-container {
      padding: 10px;
    }

    .chat-input {
      line-height: 30px;
      border-radius: 30px;
      font-family: "Poppins", sans-serif;
      font-size: 12px;
      padding-right: 45px !important;
    }

    .chat-input::placeholder {
      font-family: "Poppins", sans-serif;
      font-size: 12px;
    }

    .header-title {
      font-family: "Poppins", sans-serif;
      color: #fff;
      font-size: 22px;
    }

    .language-buttons button {
      font-family: "Poppins", sans-serif;
      font-size: 12px;
      border-radius: 15px;
      background-color: #561f7a;
      border: none;
      color: #fff;
      width: 100%;
      padding-top: 5px;
      padding-bottom: 5px;
    }

    @media screen and (max-width: 600px) {
      .background {
        padding: 5px !important;
        margin-top: 10px;
      }

      .container {
        width: 100% !important;
        margin: 10px;
        position: relative !important;
        border: solid 1px #333;
        border-radius: 30px;
        height: 98vh;
      }

      #response {
        width: 100%;
        height: 80vh;
      }

      #questionForm {
        position: absolute;
        bottom: 0;
        width: 100%;
        padding: 10px;
        padding-top: 0px;
      }
    }

    .langImage {
      width: 100%;
      height: auto;
    }

    #questionButtons button {
      margin-bottom: 10px;
    }

    @keyframes fadeIn {
      0% {
        opacity: 0;
      }

      50% {
        opacity: 0.5;
      }

      100% {
        opacity: 1;
      }
    }

    @keyframes visible {
      0% {
        visibility: hidden;
      }

      100% {
        visibility: visible;
      }
    }

    .loading {
      animation: fadeIn 0.5s ease-in-out infinite alternate, visible 0.5s ease-in-out infinite alternate;
    }

    .typingmsg-wrapper{
      background-color: #fff;
      color: #000;
    }
    .typing-msg{
      color: #000;
      font-size: 25px;
      padding: 5px !important;
    }
    .error-message{
      background-color: #561f7a9c;
      color: #fff;
      padding: 10px;
      border-radius: 10px !important;
      margin-top: 10px;
    }
  </style>
</head>

<body class="background">
  <div class="container my-0 p-0">
    <div class="d-flex chat-header w-100 py-2 text-center">
      <!-- <img src="../Asset-1-2.png" alt="" class="px-3 py-2"> -->
      <p class="text-white header-title px-3 mb-0">Raja jewellers</p>
    </div>

    <div class="d-flex chat-container">
      <div id="response" class="">
        <div class="d-flex justify-content-center align-items-center">
          <img src="../Asset-1-2.png" alt="" class="px-3 py-2 mb-3">
        </div>
        <div class="bot-message"><img class="message-image" src="/chat-header.png">
          <div>
            <img src="../language-img.png" alt="" class="px-3 py-2 mb-3 img-fluid langImage">
            <p class="mb-2">Hello, Welcome to Raja jewellers.</p>
            <span id="questionButtons" class="d-flex flex-column language-buttons w-100 p-0 m-0">

            </span>

          </div>
        </div>
      </div>
    </div>
    <form id="questionForm">
      <input class="form-control chat-input" placeholder="What's your question about?" id="question" name="question"
        required></input>
      <button type="submit" class="btn btn-light btn-lg chat-submit-button"><i class="bi bi-send"></i></button>
    </form>
  </div>





  <script>


    var quickQuestions = [];
  <% for (var i = 0; i < questions.length; i++) { %>
      quickQuestions.push({
        question: "<%= questions[i].question %>",
        answer: "<%= questions[i].answer %>"
      });
  <% } %>


    var questionButtonsContainer = document.getElementById("questionButtons");

    quickQuestions.forEach(function (qa) {
      var button = document.createElement("button");
      button.textContent = qa.question;
      button.addEventListener("click", function () {

        // Add the clicked question as a user message to the chat history
        chatHistory.push({ role: 'quickQuestion', content: qa.question });

        // Display the user's question
        appendMessageToResponse('quickQuestion', qa.question);
        // Display the corresponding answer
        appendMessageToResponse('quickAnswer', qa.answer);
      });
      questionButtonsContainer.appendChild(button);
    });



    let chatHistory = [];


    // Function to append a typing animation message
    function showTypingAnimation() {
      const responseDiv = document.getElementById("response");
      const typingMessage = document.createElement("div");
      typingMessage.classList.add("bot-message");
      typingMessage.innerHTML = `
    <div class="typing-animation typingmsg-wrapper">
      <i class="bi bi-three-dots loading typing-msg"></i>
    </div>
  `;
      responseDiv.appendChild(typingMessage);
      responseDiv.scrollTop = responseDiv.scrollHeight;
    }

    // Function to remove typing animation message
    function hideTypingAnimation() {
      const typingMessage = document.querySelector(".typing-animation");
      if (typingMessage) {
        typingMessage.remove();
      }
    }

    // Function to handle errors
    function handleErrorMessage(error) {
      const responseDiv = document.getElementById("response");
      let errorMessage = "<p class='error-message'>The allocated number of tokens are over, please ask the administrator to add more tokens to the system.</p>"; // Default error message

      // Check if the error message matches the specific error condition
      if (error.message === "The allocated number of tokens are over, please ask the administrator to add more tokens to the system.") {
        errorMessage = "<p>The allocated number of tokens are over, please ask the administrator to add more tokens to the system.</p>";
      }

      responseDiv.innerHTML = errorMessage;
    }


    function appendMessageToResponse(role, content) {
      const responseDiv = document.getElementById("response");
      const messageDiv = document.createElement("div");

      if (role === 'quickQuestion') {
        messageDiv.classList.add("user-message"); // Apply user message style
      } else if (role === 'quickAnswer') {
        messageDiv.classList.add("bot-message"); // Apply bot message style
      } else {
        messageDiv.classList.add(role === 'user' ? "user-message" : "bot-message");
      }

      const image = document.createElement("img");
      image.classList.add("message-image");
      if (role === 'quickQuestion' || role === 'user') {
        image.src = "/user.webp"; // Set user image
      } else {
        image.src = "/chat-header.png"; // Set bot image
      }

      // Check if the content is a list
      const listRegex = /^\d+\.\s.*$/gm;
      const isList = listRegex.test(content);

      // If it's a list, format it as an unordered list
      if (isList) {
        const listItems = content.split('\n').map(item => {
          return `<li style="margin-bottom: 10px !important;">${item}</li>`;
        }).join('');
        messageDiv.innerHTML = `<div><ul style="list-style: none; padding: 0px !important">${listItems}</ul></div>`;
      } else {
        messageDiv.innerHTML = `<div>${content}</div>`;
      }

      messageDiv.prepend(image);

      responseDiv.appendChild(messageDiv);
      // Scroll down to the latest message
      responseDiv.scrollTop = responseDiv.scrollHeight;
    }



    // Function to call the chat API
    async function callChatAPI() {
      try {

        // Disable input field and change submit button icon to dot
        const questionInput = document.getElementById("question");
        questionInput.disabled = true;

        const submitButton = document.querySelector(".chat-submit-button");
        submitButton.innerHTML = "<i class='bi bi-three-dots loading'></i>";
        submitButton.disabled = true;

        // Show typing animation
        showTypingAnimation();

        // Get the chat ID from local storage
        let chatId = localStorage.getItem('chatId');

        // Prepare the request body
        const requestBody = {
          messages: chatHistory,
          chatId: chatId
        };

        // Make the API call
        const response = await fetch("/api/chat-response", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(requestBody),
        });

        // Parse the response data
        const data = await response.json();

        // Update chat history with the received data
        chatHistory = data.chatHistory || [];

        // If chat ID doesn't exist in local storage, set it
        if (!localStorage.getItem('chatId')) {
          localStorage.setItem('chatId', data.chatId);
        }

        // Append the bot's response to the response
        appendMessageToResponse('bot', data.answer);

        // Hide typing animation
        hideTypingAnimation();

        // Enable input field and change submit button icon back to send icon
        questionInput.disabled = false;
        submitButton.innerHTML = "<i class='bi bi-send'></i>";
        submitButton.disabled = false;

      } catch (error) {
        console.error("Error submitting question:", error);
        // Handle specific error message
        handleErrorMessage(error);
      }
    }


    // Event listener for the form submission
    document.getElementById("questionForm").addEventListener("submit", async function (event) {
      event.preventDefault();
      const questionInput = document.getElementById("question");
      const question = questionInput.value;
      document.getElementById("question").value = "";

      // Push the user's typed question to the chat history
      chatHistory.push({ role: 'user', content: question });

      // Append the user's typed question to the response
      appendMessageToResponse('user', question);

      // Call the chat API with the updated chat history
      callChatAPI();
    });
  </script>
</body>

</html>